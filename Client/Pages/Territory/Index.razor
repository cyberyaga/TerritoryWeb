@page "/Territory"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TerritoryWeb.Shared.Territory
@inject HttpClient Http

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><NavLink href="/">Home</NavLink></li>
        <li class="breadcrumb-item active">Territory</li>
    </ol>
</nav>
<h2>PageTitle</h2>
<NavLink href="/Territory/Create" class="btn btn-outline-secondary"><i class="fa fa-plus-square" aria-hidden="true"></i> CreateTerritory</NavLink>
@if (territories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-hover table-condensed">
        <thead>
            <tr>
                <th>THTerritoryName</th>
                <th>THDoors</th>
                <th>THCity</th>
                <th>THType</th>
                <th>THAssignedPublisher</th>
                <th>THCheckedOut</th>
                <th>THCheckedIn</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in territories)
            {
                <tr>
                    <td><NavLink class="nav-link" href="@t.TerritoryUrl">@t.TerritoryName</NavLink></td>
                    <td>
                        <NavLink class="nav-link" href="@t.DoorsUrl">@t.DoorCount</NavLink>
                    </td>
                    <td>@t.City</td>
                    <td>@t.TerritoryType</td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private TerritoryIndexView[]? territories;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            territories = await Http.GetFromJsonAsync<TerritoryIndexView[]>("Territory/GetTerritories");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}